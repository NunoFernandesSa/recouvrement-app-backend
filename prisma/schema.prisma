generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- role for User -----
enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

// ----- type for Client -----
enum ClientType {
  PROFESSIONAL
  PERSONAL
}

// ----- state for Actions -----
enum ActionState {
  PENDING
  APPROVED
  REJECTED
}

// ----- state for Debt -----
enum DebtState {
  PENDING
  PAID
  OVERDUE
}

/**
 * ----- User model -----
 * Represents a user in the system.
 * Each user can have multiple clients, folders, and debts.
 * The user has a unique email and a password for authentication.
 * The role can be USER or ADMIN, with USER as the default.
 * Created and updated timestamps are automatically managed.
 */
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients       Client[]
  folders       Folder[]
  debts         Debt[]
  actions       Action[]
  actionDetails ActionDetail[]
}

/**
 * ----- Client model -----
 * Represents a client associated with a user.
 * Each client has a unique email and can have multiple folders and debts.
 * The client has a name and can be either a professional or a personal client.
 * Created and updated timestamps are automatically managed.
 * Each client belongs to a user.
 */
model Client {
  id        String     @id @default(cuid())
  name      String
  email     String?
  email2    String?
  phone     String?
  address   String?
  siret     String?
  type      ClientType @default(PROFESSIONAL)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id])

  folders Folder[]
}

/**
 * ----- Folder model -----
 * Represents a folder associated with a client.
 * Each folder has a unique reference and can contain multiple debts.
 * Created and updated timestamps are automatically managed.
 * Each folder belongs to a user and a client.
 */
model Folder {
  id        String   @id @default(cuid())
  reference String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id])

  clientId String
  Client   Client @relation(fields: [clientId], references: [id])

  debt Debt[]

  actions       Action[]
  actionDetails ActionDetail[]
}

/**
 * ----- Debt model -----
 * Represents a debt associated with a user, folder, or client.
 * Each debt has an amount, a due date, and a status.
 * The status can be PENDING, PAID, or OVERDUE.
 * Created and updated timestamps are automatically managed.
 * Each debt belongs to a user, a folder, or a client.
 */
model Debt {
  id        String    @id @default(cuid())
  amount    Float
  dueDate   DateTime
  state     DebtState @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id])

  folderId String
  folder   Folder @relation(fields: [folderId], references: [id])
}

/**
 * ----- Action model -----
 * Represents an action associated with a folder.
 * Each action has a date when it occurred and a state.
 * Contains details about actions taken through ActionDetail model.
 * The state can be PENDING, APPROVED, or REJECTED.
 * Each action belongs to a user who performed it and a folder it relates to.
 * Actions can have multiple details describing specific activities performed.
 */
model Action {
  id    String      @id @default(cuid())
  date  DateTime
  state ActionState @default(PENDING)

  folderId String
  Folder   Folder @relation(fields: [folderId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])

  details ActionDetail[]
}

/**
 * ----- ActionDetail model -----
 * Represents details of an action performed.
 * Each detail contains information about the type of action, a comment, and timestamps.
 * Each detail belongs to an action and can be associated with a user or a folder.
 */
model ActionDetail {
  id         String   @id @default(cuid())
  actionType String // ex: "EMAIL_SENT", "CALL_MADE", etc.
  comment    String?
  createdAt  DateTime @default(now())

  actionId String
  action   Action @relation(fields: [actionId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Folder   Folder @relation(fields: [folderId], references: [id])
  folderId String
}
